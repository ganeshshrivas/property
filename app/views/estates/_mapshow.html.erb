<script type="text/javascript">
  function initialize() {
  var mapOptions = {

    <% if @c_lat.present? && @c_lng.present? %>
    center: new google.maps.LatLng(<%= @c_lat%>,<%= @c_lng %>),
    <% else %>
    center: new google.maps.LatLng(22.695800, 75.863557),
    <% end %>
    zoom: 14
  };
  var map = new google.maps.Map(document.getElementById('map-canvas'),
    mapOptions);

  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));

  var types = document.getElementById('type-selector');
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

  var autocomplete = new google.maps.places.Autocomplete(input);
  autocomplete.bindTo('bounds', map);

  var infowindow = new google.maps.InfoWindow();
  var marker = new google.maps.Marker({
    map: map,
    draggable:true,
    anchorPoint: new google.maps.Point(0, -29)
  });

// additional

function geocodePosition(pos) 
{
   geocoder = new google.maps.Geocoder();
   geocoder.geocode
    ({
        latLng: pos
    }, 
        function(results, status) 
        {
            if (status == google.maps.GeocoderStatus.OK) 
            {
                $("#pac-input").val(results[0].formatted_address);
                $("#mapErrorMsg").hide(100);
            } 
            else 
            {
                $("#mapErrorMsg").html('Cannot determine address at this location.'+status).show(100);
            }
        }
    );
}

// end additional  










google.maps.event.addListener(marker, 'drag', function(evt){
   document.getElementById('latbox').value = evt.latLng.lat() ;
   document.getElementById('lngbox').value = evt.latLng.lng() ;
 });


google.maps.event.addListener(marker, 'drag', function(evt){
   geocodePosition(marker.getPosition());
 });




  google.maps.event.addListener(autocomplete, 'place_changed', function() {
    infowindow.close();
    marker.setVisible(false);
    var place = autocomplete.getPlace();
    if (!place.geometry) {
      return;
    }

    // If the place has a geometry, then present it on a map.
    if (place.geometry.viewport) {
      map.fitBounds(place.geometry.viewport);
    } else {
      map.setCenter(place.geometry.location);
      map.setZoom(17);  // Why 17? Because it looks good.
    }
//    marker.setIcon(/** @type {google.maps.Icon} */({
//      url: place.icon,
//      size: new google.maps.Size(71, 71),
//      origin: new google.maps.Point(0, 0),
//      anchor: new google.maps.Point(17, 34),
//      scaledSize: new google.maps.Size(35, 35)
//    }));

    marker.setPosition(place.geometry.location);
    document.getElementById('latbox').value = place.geometry.location.lat() ;
    document.getElementById('lngbox').value = place.geometry.location.lng() ;
    marker.setVisible(true);
    

    var address = '';
//    if (place.address_components) {
//      address = [
//        (place.address_components[0] && place.address_components[0].short_name || ''),
//        (place.address_components[1] && place.address_components[1].short_name || ''),
//        (place.address_components[2] && place.address_components[2].short_name || ''),
//        (place.address_components[3] && place.address_components[2].short_name || ''),
//        (place.address_components[4] && place.address_components[2].short_name || ''),
//      ].join(' ');
//    }

//    infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
//    infowindow.open(map, marker);
  });

  // Sets a listener on a radio button to change the filter type on Places
  // Autocomplete.
  function setupClickListener(id, types) {
    var radioButton = document.getElementById(id);
    google.maps.event.addDomListener(radioButton, 'click', function() {
      autocomplete.setTypes(types);
   });
  }

  setupClickListener('changetype-all', []);
  
}

google.maps.event.addDomListener(window, 'load', initialize);

</script>
<% flag = 1 %>
     <%= f.fields_for :pictures do |p| %>
     <% if flag == 1 %>

     <div class="field">
       <%= p.label :avatar %><br>
       <%= p.file_field :avatar, :multiple => true, :required => true, name: "pictures[avatar][]" %>
  
  <!-- for caching -->
  <%= p.hidden_field :avatar_cache %>

  <%= p.hidden_field :_destroy %>


     </div>

    <% flag+=1 %>
   <% end %>
 <% end %>
  <div class="field">
    
    <%= f.text_field :address, :id=>"pac-input",:class=>"controls", :placeholder =>"Enter a location" %>
  </div>

  <div class="field">
    <%= f.label :"Latitude"%><br>
    <%= f.text_field :latitude, :id=>"latbox", :readonly => true,  :required => true %>
  </div>

  <div class="field">
    <%= f.label :"Longitude"%><br>
    <%= f.text_field :longitude, :id=>"lngbox", :readonly => true,  :required => true %>
  </div>

  <div id="type-selector" class="controls">
     
  </div>     
  <div id="map-canvas" style="height:400px;width:600px;"></div>

  